create table if not exists configuration (
  key text primary key,
  value jsonb
);

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='configuration' AND column_name='key') THEN
        ALTER TABLE configuration ADD COLUMN key text primary key;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='configuration' AND column_name='value') THEN
        ALTER TABLE configuration ADD COLUMN value jsonb;
    END IF;
END;
$$;

create table if not exists public.proc_map_history (
    value jsonb,
    created_at timestamp with time zone default now(),
    constraint proc_map_history_pkey primary key (created_at)
) tablespace pg_default;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_map_history' AND column_name='value') THEN
        ALTER TABLE public.proc_map_history ADD COLUMN value jsonb;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_map_history' AND column_name='created_at') THEN
        ALTER TABLE public.proc_map_history ADD COLUMN created_at timestamp with time zone default now();
    END IF;
END;
$$;

create or replace function public.save_previous_proc_map()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.key = 'proc_map' THEN
        INSERT INTO public.proc_map_history(value, created_at)
        VALUES (OLD.value, now());
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

create or replace trigger trigger_save_previous_proc_map
BEFORE UPDATE ON configuration
FOR EACH ROW
WHEN (OLD.key = 'proc_map' AND NEW.value IS DISTINCT FROM OLD.value)
EXECUTE PROCEDURE public.save_previous_proc_map();

create table if not exists todolist (
    id uuid primary key,
    user_id text,
    proc_inst_id text,
    proc_def_id text,
    activity_id text,
    activity_name text,
    start_date timestamp,
    end_date timestamp,
    status text,
    description text,
    tool text
);

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='id') THEN
        ALTER TABLE todolist ADD COLUMN id uuid primary key;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='user_id') THEN
        ALTER TABLE todolist ADD COLUMN user_id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='proc_inst_id') THEN
        ALTER TABLE todolist ADD COLUMN proc_inst_id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='proc_def_id') THEN
        ALTER TABLE todolist ADD COLUMN proc_def_id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='activity_id') THEN
        ALTER TABLE todolist ADD COLUMN activity_id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='activity_name') THEN
        ALTER TABLE todolist ADD COLUMN activity_name text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='start_date') THEN
        ALTER TABLE todolist ADD COLUMN start_date timestamp;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='end_date') THEN
        ALTER TABLE todolist ADD COLUMN end_date timestamp;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='status') THEN
        ALTER TABLE todolist ADD COLUMN status text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='description') THEN
        ALTER TABLE todolist ADD COLUMN description text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='todolist' AND column_name='tool') THEN
        ALTER TABLE todolist ADD COLUMN tool text;
    END IF;
END;
$$;

create table if not exists public.users (
    id uuid not null primary key,
    username text null,
    profile text null default '/src/assets/images/profile/defaultUser.png'::text,
    email text null,
    is_admin boolean not null default false,
    role text null
);

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='id') THEN
        ALTER TABLE public.users ADD COLUMN id uuid not null primary key;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='username') THEN
        ALTER TABLE public.users ADD COLUMN username text null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='profile') THEN
        ALTER TABLE public.users ADD COLUMN profile text null default '/src/assets/images/profile/defaultUser.png'::text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='email') THEN
        ALTER TABLE public.users ADD COLUMN email text null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='is_admin') THEN
        ALTER TABLE public.users ADD COLUMN is_admin boolean not null default false;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='role') THEN
        ALTER TABLE public.users ADD COLUMN role text null;
    END IF;
END;
$$;

create or replace function public.handle_new_user() 
returns trigger as $$
begin
    insert into public.users (id, email)
    values (new.id, new.email);
      return new;
end;
$$ language plpgsql security definer;

create or replace trigger on_auth_user_created
    after insert on auth.users
    for each row execute procedure public.handle_new_user();

create or replace function public.handle_delete_user() 
returns trigger as $$
begin
    delete from auth.users where id = old.id;
    return old;
end;
$$ language plpgsql security definer;

create or replace trigger on_public_user_deleted
    after delete on public.users
    for each row execute procedure public.handle_delete_user();

create table if not exists proc_def (
  id text primary key,
  name text,
  definition jsonb,
  bpmn text
);

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def' AND column_name='id') THEN
        ALTER TABLE proc_def ADD COLUMN id text primary key;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def' AND column_name='name') THEN
        ALTER TABLE proc_def ADD COLUMN name text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def' AND column_name='definition') THEN
        ALTER TABLE proc_def ADD COLUMN definition jsonb;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def' AND column_name='bpmn') THEN
        ALTER TABLE proc_def ADD COLUMN bpmn text;
    END IF;
END;
$$;

ALTER TABLE proc_def ENABLE ROW LEVEL SECURITY;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_policies
        WHERE policyname = 'Enable insert for authenticated users only'
        AND tablename = 'proc_def'
    ) THEN
        CREATE POLICY "Enable insert for authenticated users only" ON "public"."proc_def"
        AS PERMISSIVE FOR INSERT
        TO authenticated
        WITH CHECK ((EXISTS ( SELECT 1 FROM users WHERE ((users.id = auth.uid()) AND (users.is_admin = true)))));
    END IF;

    IF NOT EXISTS (
        SELECT 1
        FROM pg_policies
        WHERE policyname = 'Enable read access for all users'
        AND tablename = 'proc_def'
    ) THEN
        CREATE POLICY "Enable read access for all users" ON "public"."proc_def"
        AS PERMISSIVE FOR SELECT
        TO public
        USING (true);
    END IF;
END;
$$;

create table if not exists public.proc_inst (
    id text not null,
    name text null,
    user_ids text[] null,
    agent_messages jsonb null,
    status text null,
    variables_data text null,
    proc_def_id text null,
    constraint proc_inst_pkey primary key (id)
) tablespace pg_default;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_inst' AND column_name='id') THEN
        ALTER TABLE public.proc_inst ADD COLUMN id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_inst' AND column_name='name') THEN
        ALTER TABLE public.proc_inst ADD COLUMN name text null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_inst' AND column_name='user_ids') THEN
        ALTER TABLE public.proc_inst ADD COLUMN user_ids text[] null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_inst' AND column_name='agent_messages') THEN
        ALTER TABLE public.proc_inst ADD COLUMN agent_messages jsonb null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_inst' AND column_name='status') THEN
        ALTER TABLE public.proc_inst ADD COLUMN status text null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_inst' AND column_name='variables_data') THEN
        ALTER TABLE public.proc_inst ADD COLUMN variables_data text null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_inst' AND column_name='proc_def_id') THEN
        ALTER TABLE public.proc_inst ADD COLUMN proc_def_id text null;
    END IF;
END;
$$;

create table if not exists public.chats (
    uuid text not null,
    id text not null,
    messages jsonb null,
    constraint chats_pkey primary key (uuid)
) tablespace pg_default;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chats' AND column_name='uuid') THEN
        ALTER TABLE public.chats ADD COLUMN uuid text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chats' AND column_name='id') THEN
        ALTER TABLE public.chats ADD COLUMN id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chats' AND column_name='messages') THEN
        ALTER TABLE public.chats ADD COLUMN messages jsonb null;
    END IF;
END;
$$;

create table if not exists public.calendar (
  uid text not null,
  data jsonb null,
  constraint calendar_pkey primary key (uid)
) tablespace pg_default;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='calendar' AND column_name='uid') THEN
        ALTER TABLE public.calendar ADD COLUMN uid text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='calendar' AND column_name='data') THEN
        ALTER TABLE public.calendar ADD COLUMN data jsonb null;
    END IF;
END;
$$;

create table if not exists public.chat_rooms (
  id text not null,
  participants jsonb not null,
  message jsonb null,
  name text null,
  constraint chat_rooms_pkey primary key (id)
) tablespace pg_default;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_rooms' AND column_name='id') THEN
        ALTER TABLE public.chat_rooms ADD COLUMN id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_rooms' AND column_name='participants') THEN
        ALTER TABLE public.chat_rooms ADD COLUMN participants jsonb;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_rooms' AND column_name='message') THEN
        ALTER TABLE public.chat_rooms ADD COLUMN message jsonb null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='chat_rooms' AND column_name='name') THEN
        ALTER TABLE public.chat_rooms ADD COLUMN name text null;
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_views
        WHERE viewname = 'chat_room_chats'
        AND schemaname = 'public'
    ) THEN
        CREATE VIEW public.chat_room_chats AS
        SELECT
            cr.id,
            cr.name,
            cr.participants,
            c.uuid,
            c.messages
        FROM
            chat_rooms cr
            JOIN chats c ON cr.id = c.id;
    END IF;

    IF NOT EXISTS (
        SELECT 1
        FROM pg_views
        WHERE viewname = 'worklist'
        AND schemaname = 'public'
    ) THEN
        CREATE VIEW public.worklist AS
        SELECT
            t.*,
            p.name AS proc_inst_name
        FROM
            todolist t
            JOIN public.proc_inst p ON t.proc_inst_id = p.id;
    END IF;
END;
$$;

create table if not exists public.proc_def_arcv (
    arcv_id text not null,
    proc_def_id text not null,
    version text not null,
    snapshot text null,
    "timeStamp" timestamp without time zone null default current_timestamp,
    diff text null,
    message text null,
    constraint proc_def_arcv_pkey primary key (arcv_id)
) tablespace pg_default;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def_arcv' AND column_name='arcv_id') THEN
        ALTER TABLE public.proc_def_arcv ADD COLUMN arcv_id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def_arcv' AND column_name='proc_def_id') THEN
        ALTER TABLE public.proc_def_arcv ADD COLUMN proc_def_id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def_arcv' AND column_name='version') THEN
        ALTER TABLE public.proc_def_arcv ADD COLUMN version text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def_arcv' AND column_name='snapshot') THEN
        ALTER TABLE public.proc_def_arcv ADD COLUMN snapshot text null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def_arcv' AND column_name='timeStamp') THEN
        ALTER TABLE public.proc_def_arcv ADD COLUMN "timeStamp" timestamp without time zone null default current_timestamp;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def_arcv' AND column_name='diff') THEN
        ALTER TABLE public.proc_def_arcv ADD COLUMN diff text null;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='proc_def_arcv' AND column_name='message') THEN
        ALTER TABLE public.proc_def_arcv ADD COLUMN message text null;
    END IF;
END;
$$;

create table if not exists public.lock (
    id text not null,
    user_id text null,
    constraint lock_pkey primary key (id)
) tablespace pg_default;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='lock' AND column_name='id') THEN
        ALTER TABLE public.lock ADD COLUMN id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='lock' AND column_name='user_id') THEN
        ALTER TABLE public.lock ADD COLUMN user_id text null;
    END IF;
END;
$$;

create table if not exists form_def (
  id text primary key,
  html text not null,
  proc_def_id text not null,
  activity_id text not null
) tablespace pg_default;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='form_def' AND column_name='id') THEN
        ALTER TABLE form_def ADD COLUMN id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='form_def' AND column_name='html') THEN
        ALTER TABLE form_def ADD COLUMN html text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='form_def' AND column_name='proc_def_id') THEN
        ALTER TABLE form_def ADD COLUMN proc_def_id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='form_def' AND column_name='activity_id') THEN
        ALTER TABLE form_def ADD COLUMN activity_id text;
    END IF;
END;
$$;

create table if not exists notifications (
  id text primary key,
  user_id text,
  title text,
  type text,
  description text,
  is_checked boolean null default false,
  time_stamp timestamp with time zone null default now(),
  url text
);

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='notifications' AND column_name='id') THEN
        ALTER TABLE notifications ADD COLUMN id text primary key;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='notifications' AND column_name='user_id') THEN
        ALTER TABLE notifications ADD COLUMN user_id text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='notifications' AND column_name='title') THEN
        ALTER TABLE notifications ADD COLUMN title text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='notifications' AND column_name='type') THEN
        ALTER TABLE notifications ADD COLUMN type text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='notifications' AND column_name='description') THEN
        ALTER TABLE notifications ADD COLUMN description text;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='notifications' AND column_name='is_checked') THEN
        ALTER TABLE notifications ADD COLUMN is_checked boolean null default false;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='notifications' AND column_name='time_stamp') THEN
        ALTER TABLE notifications ADD COLUMN time_stamp timestamp with time zone null default now();
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='notifications' AND column_name='url') THEN
        ALTER TABLE notifications ADD COLUMN url text;
    END IF;
END;
$$;

create or replace function handle_todolist_change()
returns trigger as $$
declare
    proc_inst_name text;
begin
    if (TG_OP = 'INSERT') then
        select name into proc_inst_name from proc_inst where id = NEW.proc_inst_id;
        
        insert into notifications (id, user_id, title, type, description, is_checked, time_stamp, url)
        values (
            gen_random_uuid(),
            NEW.user_id,
            NEW.activity_name,
            'workitem',
            coalesce(proc_inst_name, ''),
            case when NEW.status = 'DONE' then true else false end,
            now(),
            '/todolist/' || NEW.id
        )
        on conflict (id) do update
        set
            user_id = EXCLUDED.user_id,
            title = EXCLUDED.title,
            type = EXCLUDED.type,
            description = EXCLUDED.description,
            is_checked = EXCLUDED.is_checked,
            time_stamp = EXCLUDED.time_stamp,
            url = EXCLUDED.url;
    end if;
    return null;
end;
$$ language plpgsql;

create or replace trigger todolist_change_trigger
after insert on todolist
for each row
execute function handle_todolist_change();

create or replace function handle_chat_insert()
returns trigger as $$
declare
    chat_room_participant jsonb;
    participant_email text;
    participant_record record;
    chat_room_name text;
begin
    -- Fetch the chat room name
    select name into chat_room_name from public.chat_rooms where id = NEW.id;

    for participant_record in
        select jsonb_array_elements(participants) as p
        from public.chat_rooms
        where id = NEW.id
    loop
        chat_room_participant := participant_record.p;
        
        if chat_room_participant->>'username' != 'System' and chat_room_participant->>'email' != NEW.messages->>'email' then
            participant_email := chat_room_participant->>'email';
            
            insert into notifications (id, user_id, title, type, description, is_checked, time_stamp, url)
            values (
                gen_random_uuid(),
                participant_email,
                NEW.messages->>'content',
                'chat',
                chat_room_name,  -- Use chat room name as description
                false,
                now(),
                '/chats?id=' || NEW.id
            )
            on conflict (id) do update
            set
                user_id = EXCLUDED.user_id,
                title = EXCLUDED.title,
                time_stamp = EXCLUDED.time_stamp,
                is_checked = EXCLUDED.is_checked,
                url = EXCLUDED.url;
        end if;
    end loop;

    return null;
end;
$$ language plpgsql;

create or replace trigger chat_insert_trigger
after insert on public.chats
for each row
execute function handle_chat_insert();